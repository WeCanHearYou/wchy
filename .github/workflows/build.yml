name: build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test-ui:
    name: test-ui
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - run: npm ci
      - run: make lint-ui
      - run: make test-ui

  test-server:
    name: test-server
    runs-on: ubuntu-latest
    services:
      minio:
        image: getfider/minio:0.0.2
        ports:
          - 9000:9000
        env:
          MINIO_ACCESS_KEY: s3user
          MINIO_SECRET_KEY: s3user-s3cr3t
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: fider_ci
          POSTGRES_PASSWORD: fider_ci_pw
          POSTGRES_DB: fider_ci
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - name: Use Go 1.16.2
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - run: npm ci # required for esbuild
      - name: install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.38.0
      - name: install godotenv
        run: go install github.com/joho/godotenv/cmd/godotenv
      - run: make lint-server
      - name: make test-server
        run: |
          mkdir ./dist
          make test-server
        env:
          BLOB_STORAGE_S3_ENDPOINT_URL: http://localhost:9000
          DATABASE_URL: postgres://fider_ci:fider_ci_pw@localhost:5432/fider_ci?sslmode=disable

  build:
    name: build
    runs-on: ubuntu-latest
    needs: [test-server, test-ui]
    steps:
      - uses: actions/checkout@v2

      - name: extract variables
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "##[set-output name=sha7;]$(echo ${GITHUB_SHA::7})"
        id: vars

      - run: docker build --build-arg buildnumber=${{ steps.vars.outputs.sha7 }} -t getfider/fider .
      - run: mkdir -p ./out
      - run: docker save getfider/fider > ./out/fider.tar
      - run: echo PR_${{ github.event.number }} > ./out/name
        if: steps.vars.outputs.branch != 'master'
      - run: echo SHA_${{ steps.vars.outputs.sha7 }} > ./out/name
        if: steps.vars.outputs.branch != 'master'
      - uses: actions/upload-artifact@v2
        with:
          name: out
          path: out/

      # - uses: azure/docker-login@v1
      #   if: steps.vars.outputs.branch == 'master'
      #   with:
      #     username: ${{ secrets.DOCKER_USER }}
      #     password: ${{ secrets.DOCKER_PASS }}

      # - name: push docker image
      #   if: steps.vars.outputs.branch == 'master'
      #   run: |
      #     docker tag getfider/fider getfider/fider:${{ steps.vars.outputs.sha7 }}
      #     docker push getfider/fider:${{ steps.vars.outputs.sha7 }}
      #     docker tag getfider/fider getfider/fider:master
      #     docker push getfider/fider:master
